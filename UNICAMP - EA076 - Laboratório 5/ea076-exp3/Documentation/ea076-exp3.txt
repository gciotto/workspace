=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "DataCmd"   (component ByteIO)
   - DataCmd_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the value to a 
                memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the port. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "Enable"    (component BitIO)
   - Enable_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - Enable_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "RS"        (component BitIO)
   - RS_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - RS_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "timer"     (component TimerInt)
   - timer_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - timer_Disable -This method disables the component - it stops the timer. No events will be generated.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU1_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TU1_GetEventMask -Returns current events mask. Note: Event that are not generated (See the "Events" tab in the Component 
                inspector) are not handled by this method. See also method <SetEventMask>.
   - TU1_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.

Module "LED"       (component BitIO)
   - LED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - LED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "Button"    (component BitIO)
   - Button_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "Conversor" (component ADC)
   - Conversor_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If 
                the <number of conversions> is more than one the conversion of A/D channels is performed specified number of 
                times.)
   - Conversor_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this 
                method returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is 
                less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - Conversor_Calibrate -This method starts self calibration process. Calibration is typically used to remove the effects of 
                the gain and offset from a specific reading.

Module "UTIL1"     (component Utility)
   - UTIL1_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - UTIL1_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - UTIL1_chcat -Adds a single character to a zero byte terminated buffer. It cares about buffer overflow.
   - UTIL1_Num8sToStr -Converts a signed 8bit value into a string.
   - UTIL1_Num8uToStr -Converts an unsigned 8bit value into a string.
   - UTIL1_Num16sToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num16uToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num32uToStr -Converts an unsigned 32bit value into a string.
   - UTIL1_Num32sToStr -Converts a signed 32bit value into a string.
   - UTIL1_Num16sToStrFormatted -Converts a 16bit signed value to string.
   - UTIL1_Num16uToStrFormatted -Converts a 16bit unsigned value to string.
   - UTIL1_Num32uToStrFormatted -Converts a 32bit unsigned value to string.
   - UTIL1_Num32sToStrFormatted -Converts a 32bit signed value to string.
   - UTIL1_strcatNum8u -Appends a 8bit unsigned value to a string buffer.
   - UTIL1_strcatNum8s -Appends a 8bit signed value to a string buffer.
   - UTIL1_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - UTIL1_strcatNum16s -Appends a 16bit signed value to a string buffer.
   - UTIL1_strcatNum32u -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum32s -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum16uFormatted -Appends a 16bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum16sFormatted -Appends a 16bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum32uFormatted -Appends a 32bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum32sFormatted -Appends a 32bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum8Hex -Appends a 8bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum16Hex -Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum24Hex -Appends a 32bit unsigned value to a buffer as hex number (without a 0x prefix). Only 24bits are used.
   - UTIL1_strcatNum32Hex -Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum32sDotValue100 -Appends a 32bit signed value to a buffer. The value is in 1/100 units.  For example for the 
                value -13456 it will append the string "-134.56"
   - UTIL1_IsLeapYear -Returns true if a given year is a leap year
   - UTIL1_WeekDay -Returns the weekday for a given date >= 1.Jan.1900
   - UTIL1_ReadEscapedName -Scans an escaped name from a string. This is useful e.g. for double quoted file names.
   - UTIL1_xatoi -Custom atoi() (ascii to int) implementation by Elm Chan
   - UTIL1_ScanDate -Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.
   - UTIL1_ScanTime -Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.
   - UTIL1_ScanDecimal8uNumber -Scans a decimal 8bit unsigned number
   - UTIL1_ScanDecimal8sNumber -Scans a decimal 8bit signed number
   - UTIL1_ScanDecimal16uNumber -Scans a decimal 16bit unsigned number
   - UTIL1_ScanDecimal16sNumber -Scans a decimal 16bit signed number
   - UTIL1_ScanDecimal32uNumber -Scans a decimal 32bit unsigned number
   - UTIL1_ScanDecimal32sNumber -Scans a decimal 32bit signed number
   - UTIL1_ScanDecimal32sDotNumber -Scans a decimal 32bit signed number with a following dot (fractional part), e.g. "-34587.
                0248", it will return the (signed) integral and fractional part with number of fractional zeros. The function 
                accepts as well numbers  like "17" (no fractional part" or "17.0"
   - UTIL1_ScanHex8uNumber -Scans a hexadecimal 8bit number, starting with 0x
   - UTIL1_ScanHex8uNumberNoPrefix -Scans a hexadecimal 8bit number, without 0x
   - UTIL1_ScanHex16uNumber -Scans a hexadecimal 16bit number, starting with 0x
   - UTIL1_ScanHex32uNumber -Scans a hexadecimal 32bit number, starting with 0x
   - UTIL1_ScanSeparatedNumbers -Scans multiple numbers separated by character, e.g. "123.68.5.3"
   - UTIL1_ScanDoubleQuotedString -Scans a string inside double quotes and returns it without the double quotes.
   - UTIL1_strcmp -Wrapper to the standard strcmp() routine
   - UTIL1_strncmp -Wrapper to the standard strncmp() routine
   - UTIL1_strFind -Searches a substring inside a string and returns the position.
   - UTIL1_strtailcmp -Compares the tail of a string and returns 0 if it matches, 1 otherwise
   - UTIL1_strlen -Wrapper to the standard strlen() function.
   - UTIL1_strCutTail -Removes a tailing substring from a string. The string passed will be modified (the tail is cut by 
                writing a zero byte to the string!)

Module "C1"        (component BitIO)
   - C1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "C2"        (component BitIO)
   - C2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "C3"        (component BitIO)
   - C3_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "L1"        (component BitIO)
   - L1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - L1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "L2"        (component BitIO)
   - L2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - L2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "L3"        (component BitIO)
   - L3_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - L3_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "L4"        (component BitIO)
   - L4_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - L4_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "EInt1"     (component ExtInt)
   - EInt1_Enable -Enable the component - the external events are accepted. This method is available only if HW module allows 
                enable/disable of the interrupt.
   - EInt1_Disable -Disable the component - the external events are not accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.
   - EInt1_GetVal -Returns the actual value of the input pin of the component.

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "EE241"     (component 24AA_EEPROM)
   - EE241_ReadByte -Reads a single byte from the given memory address
   - EE241_WriteByte -Writes a single byte to specified address
   - EE241_ReadBlock -Read a block of memory.
   - EE241_WriteBlock -Writes a block of data to the EEPROM
   - EE241_SelectDevice -Configures the I2C address to be used for the memory. With this multiple devices attached to the bus 
                can be addressed.
   - EE241_Test -Test routine to test the driver. Note that this routine writes to the EEPROM!
   - EE241_ParseCommand -Shell Command Line parser. This method is enabled/disabled depending on if you have the Shell 
                enabled/disabled in the properties.

Module "GI2C1"     (component GenericI2C)
   - GI2C1_SelectSlave -Selects the slave device on the bus. Method might use a semaphore to protect bus access.
   - GI2C1_UnselectSlave -Unselects the device. Method will release a used a semaphore.
   - GI2C1_RequestBus -Starts a critical section for accessing the bus.
   - GI2C1_ReleaseBus -Finishes a critical section for accessing the bus.
   - GI2C1_ReadBlock -Read from the device a block.
   - GI2C1_WriteBlock -Write a block to the device.
   - GI2C1_ReadAddress -Read from the device. This writes (S+i2cAddr+0), (memAddr), (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteAddress -Write to the device: (S+i2cAddr+0), (memAddr), (data)...(data+P)
   - GI2C1_ReadByteAddress8 -Read a byte from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr), 
                (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteByteAddress8 -Write a byte to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - GI2C1_ProbeACK -Accesses the bus to check if the device responds with an ACK (ACK polling).
   - GI2C1_GetSemaphore -Returns the currently allocated semaphore.
   - GI2C1_Deinit -Deinitializes the driver.
   - GI2C1_ScanDevice -Checks if a device responds on the bus with an ACK.
   - GI2C1_Init -Initializes the driver.

Module "CI2C1"     (component I2C_LDD)
   - CI2C1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - CI2C1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - CI2C1_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes inclusive 
                of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address must be 
                specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target slave 
                address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. The 
                state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent are 
                not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or general 
                call value. Any send or receive method directs to or from selected device, until a new slave device is selected 
                by this method. This method is available for the MASTER mode.
   - CI2C1_SendAcknowledge -This method send acknowledge/not acknowledge for current receiving byte. This method is available 
                only if control acknowledge bit is enabled.

Module "CLS1"      (component Shell)
   - CLS1_PrintPrompt -Prints the prompt to the stdOut channel
   - CLS1_SendNum8u -Sends an 8bit unsigned number to the given I/O
   - CLS1_SendNum8s -Sends an 8bit signed number to the given I/O
   - CLS1_SendNum16u -Sends a 16bit unsigned number to the given I/O
   - CLS1_SendNum16s -Sends a 16bit signed number to the given I/O
   - CLS1_SendNum32u -Sends a 32bit unsigned number to the given I/O
   - CLS1_SendNum32s -Sends a 32bit signed number to the given I/O
   - CLS1_SendStr -Prints a string using an I/O function
   - CLS1_SendData -Sends data using an I/O function. Unlike SendStr(), with this method it is possible to send binary data, 
                including zero bytes.
   - CLS1_PrintStatus -Prints various available system status information
   - CLS1_ParseCommand -Parses a shell command. Use 'help' to get a list of supported commands.
   - CLS1_IsHistoryCharacter -Returns TRUE if character is a history character
   - CLS1_ReadLine -Reads a line from stdIn and returns TRUE if we have a line, FALSE otherwise.
   - CLS1_PrintCommandFailed -Prints a standard message for failed or unknown commands
   - CLS1_IterateTable -Parses a shell command. It handles first the internal commands and will call the provided callback.
   - CLS1_SetStdio -Sets an StdIO structure which is returned by GetStdio()
   - CLS1_GetStdio -Returns the default stdio channel. This method is only available if a shell is enabled in the component 
                properties.
   - CLS1_RequestSerial -Used to get mutual access to the shell console. Only has an effect if using an RTOS with semaphore for 
                the console access.
   - CLS1_ReleaseSerial -Used to release mutual access to the shell console. Only has an effect if using an RTOS with semaphore 
                for the console access.
   - CLS1_ReadAndParseWithCommandTable -Reads characters from the default input channel and appends it to the buffer. Once a 
                new line has been detected, the line will be parsed using the handlers in the table.
   - CLS1_ParseWithCommandTable -Parses a shell command. It handles first the internal commands and will call the provided 
                callback.
   - CLS1_GetSemaphore -Return the semaphore of the shell.
   - CLS1_SendStatusStr -Prints a status string using an I/O function, formated for the 'status' command
   - CLS1_SendHelpStr -Prints a string using an I/O function, formated for the 'help' command
   - CLS1_ReadChar -Reads a character (blocking)
   - CLS1_SendChar -Sends a character (blocking)
   - CLS1_KeyPressed -Checks if a key has been pressed (a character is present in the input buffer)
   - CLS1_Init -Initializes the module, especially creates the mutex semaphore if an RTOS is used.
   - CLS1_Deinit -De-Initializes the module, especially frees the mutex semaphore if an RTOS is used.

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section

Module "ConversorDA" (component DAC)
   - ConversorDA_SetValue -This method sets values of all channels.

Module "Cpu"       (component MKL25Z128LK4)

===================================================================================
