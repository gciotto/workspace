      .text
      .align 4
      .global	division
      .type	division, %function
/************************************************
    entrada 	:- r4 e r9
    saida  	:- r8 = r4/r9
************************************************/

divide:
	STMFD sp!, {r4, r6-r7, r9-r11, lr}
	CMP r9, #0
	BEQ divide_end
	@check for divide by zero!

	MOV r8,#0     @ clear R0 to accumulate result
	MOV r3,#1     @set bit 0 in R3, which will be
			    @shifted left then right
start:
	CMP r9,r4
	MOVLS r9,r9,LSL#1
	MOVLS r3,r3,LSL#1
	BLS      start
	@shift R2 left until it is about to
	@be bigger than R1
	@shift R3 left in parallel in order
	@to flag how far we have to go

next:
	CMP r4,r9      @carry set if R1>R2 (don't ask why)
	SUBCS r4,r4,r9   @subtract R2 from R1 if this would
			      @give a positive answer
	ADDCS r8,r8,r3   @and add the current bit in R3 to
			      @the accumulating answer in R0

	MOVS r3,r3,LSR#1     @Shift R3 right into carry flag
	MOVCC r9,r9,LSR#1     @and if bit 0 of R3 was zero, also
				  @shift R2 right
	BCC next            @If carry not clear, R3 has shifted
				  @back to where it started, and we
				  @can end
divide_end:
	LDMFD sp!, {r4, r6-r7, r9-r11, lr}
	MOV pc, lr