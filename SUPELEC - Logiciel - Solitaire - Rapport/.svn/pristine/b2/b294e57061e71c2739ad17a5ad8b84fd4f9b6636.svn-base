%%This is a very basic article template.
%%There is just one section and two subsections.
\documentclass{article}

\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage[hmargin=2.5cm,vmargin=2.5cm]{geometry}
\usepackage[section]{placeins}
\usepackage[french]{babel} 
\usepackage{subcaption}
\usepackage{titlesec}

\setcounter{tocdepth}{3}

\title{Jeu du Solitaire}
\author{Gustavo Ciotto Pinton}
\date{Octobre 2014}

\begin{document}

\begin{titlepage}
\vspace*{.18\textheight}
\begin{center}
%
\begin{figure}[h]
    \centering
    \includegraphics[scale=0.12]{images/LogoSupelec}
\end{figure}
%
\vspace*{10pt}
\textbf{\LARGE JEU DU SOLITAIRE} \\[0.5 cm]
\textbf{\LARGE Projet de développement logiciel }\\[1 cm]

Gustavo \textbf{CIOTTO PINTON}\\
Ignacio \textbf{GARCIA ATANCE GARCIA}\\

\vspace*{10pt}
Séquence 5 - Promotion 2013-2015\\[1 cm]

\vspace*{60pt}
Octobre 2014

\end{center}
\end{titlepage}

\newpage
\tableofcontents

\newpage
\section{Introduction}

Le principal objectif du projet de conception logiciel est le développement 
des outils qui permettent le bon déroulement d'un jeu du solitaire. Afin
d'y bien arriver, on considère toujours les connaissances apprises dans le cours
de première année, notamment les \og Fondements de l'Informatique\fg, \og Génie
Logiciel \fg ~et \og Modèles de programmation \fg.

\vspace{12pt}

En ce qui concerne au jeu du solitaire, il consiste à un plateau composé des
trous qui peuvent être occupés par des pions ou pas. L'objectif est alors
d’éliminer le maximum des pièces possibles. Une pièce est enlevée du jeu
lorsqu’une autre pièce la \og mange \fg, c’est-à-dire, la saute par dessus.

\vspace{12pt}

Notre programme doit alors être capable de réaliser plusieurs fonctions afin
de garantir l'efficience et la performance d'un tel jeu. En effet, l'application
construite permet a l'utilisateur de tâches allant de la manipulation des
fichiers texte (réalisant ainsi la lecture de l’état du plateau et aussi
l’écriture de la liste des coups qui ont été faits), l’affichage graphique à 
travers du paquetage \textit{Swing}, fourni par Java, jusqu'à l'implemtation
d'algorithmes d'intelligence artificielle qui puissent calculer la meilleure
liste de coups possible.

\vspace{12pt}

Afin d'attendre ces besoins, on a bien considéré l'étape de modélisation UML et
certains de ses diagrammes. On remarque l'utilisation des outils fournis par le
logiciel Eclipse comme le \textit{plug-in} Papyrus, avec lequel nous avons
construit les diagrammes de classes et de cas d’utilisation, et aussi
l’importance du système de contrôle des version, SVN, qui nous a bien permis de
gérer plus facilement nos nombreuses modifications.


\newpage
\section{Modélisation du programme - UML}

La construction d'un modèle permet au programmeur d'identifier les principaux
besoins et les possibles incohérences dans la structure de son application avant
même de l'étape de codage, ce qui peut éviter des grands changements à
l'implémentation et, par conséquent, des gros problèmes. 

\subsection{Diagramme de cas d'utilisation}

La première étape de la modélisation a consisté à la construction d'un diagramme
de cas d’utilisation, dont principal but est de montrer les fonctionnalités que 
notre programme devra fournir. Le résultat de notre première conception peut
être trouvé dans la figure \ref{fig:cas_utilisation}, où on remarque la présence
d’un seul acteur, le joueur, et de quatre cas principaux:

\vspace{12pt}

\begin{itemize}
  
  \item \textbf{Choisir le plateau}: le joueur pourra choisir un plateau
  quelconque, mais pour le faire, il doit obligatoirement choisir un
  fichier d'origine.  C'est pour cette raison qu'on utilise une relation de \og
  include \fg ~entre le cas d'utilisation \og Choisir Plateau \fg ~et le cas
  \og Lire fichier \fg.
  
  \vspace{12pt}

  \item \textbf{Sauvegarder résultat}: dans ce cas le joueur peut choisir entre
  sauvegarder l’état du plateau ou sauvegarder la liste des coups réalisés.
  Donc, on utilise des relations \og extend \fg ~entre les respectifs cas. De
  même façon, le joueur devra obligatoirement choisir un fichier à être écrit.

  \vspace{12pt}
  
  \item \textbf{Calculer prochain coup}: le programme devra fournir
  le prochain coup à être réalisé et conséquemment une stratégie doit être
  choisit par le joueur. L'application devra également calculer et fournir tous
  les coups possibles à chaque étape.
  
  \vspace{12pt}
  
  \item \textbf{Obtenir plateau final}: ce dernier cas d’utilisation consiste à
  calculer l’état final du plateau et de l’afficher selon la stratégie choisie
  par le joueur.
\end{itemize}

\begin{figure}[h]
    \centering
    \includegraphics[scale=0.55]{images/diagramme_utilisation}
    \caption{Diagramme de cas d'utilisation.}
    \label{fig:cas_utilisation}
\end{figure}

\subsection{Diagramme de classes}

Une fois tous les besoins identifiés, on peut penser aux détails, c'est-à-dire,
leurs méthodes et variables, qui concernent les classes qui feront partie de
notre application. Tout d'abord, nous avons considéré de diviser nos classes
selon leurs caractéristiques et les placer dans trois groupes, étant ainsi:

\begin{itemize}

	\item \textbf{Entités}: les classes placées dans ce groupe répresentent les
	données et encapsulent les données utilisées. Ces classes seront naturellement
	utilisées dans tous les autres groupes de l'application. On cite notamment les
	classes \textit{Plateau} et \textit{Coup} qui contiennent respectivement les
	données nécessaires à la répresentation d'un plateau et d'un coup.

	\vspace{12pt}
	 
	\item \textbf{Contrôle}: ce groupe contient les classes responsables pour
	contrôler le déroulement du jeu. Elles sont ainsi capables de contrôler les
	interfaces, de décider les prochains coups et contiennent les variables qui
	décrivent l'état actuel du jeu.

	\vspace{12pt}

	\item \textbf{Interfaces}: les dernières classes sont engagées à l'interface
	entre l'utilisateur final, soit à travers du terminal, soit par fênetres. On
	place également dans cette classification, la classe dédiée à la manipulation
	des fichiers.

\end{itemize}

\vspace{12pt}

Le résultat est finalement montré dans figure \ref{fig:diagramme_classes} de la
section \textbf{Annexes}.

\subsubsection{Les classes \og Entités \fg}

Comme abordé précédemment, les classes qui appartiennet à ce groupe possèdent
les informations importantes qui seront utilisées par toutes les autres
structures de l'application. En d'autres mots, ce sont des données fondamentales
à d'autres classes et aux algorithmes d'intelligence artificielle. La figure
\ref{fig:classes_entites} montre en détail les components de ce paquet.

\begin{figure}[h]
    \centering
    \includegraphics[scale=0.45]{images/entites}
    \caption{Paquetage \og entités \fg ~du diagramme de classes.}
    \label{fig:classes_entites}
\end{figure}

On peut notamment citer:

\vspace{12pt}

\begin{itemize}
  	\item La classe \textbf{Plateau} contient les informations qui décrivent
  	complétement un plateau de taille et nombre de pions quelconque. Elle garde
  	aussi une liste avec les cases actuellement vides et le nombre de pièces
  	restantes. C'est à un objet de cette classe gérer les changements d'état des
  	ses cases, gardées sur une matrice d'objets de type Case.
	
	\vspace{12pt}

	\item Chaque objet appartenant à classe \textbf{Case} a un attribut qui
	décrit son état actuel et sa coordonnée vis-à-vis au plateau. A principe, on
	a rejetté l'idée d'avoir une telle classe, puisqu'on pourrait implémenter une
	matrice des entiers directement, mais après réflechir un peu, on a décidé de la
	maintenir, vu qu'elle rendrait plus facile le codage des algorithmes et un
	possible changement de la structure de données (par exemple, si on voulait
	remplacer une liste au lieu de la matrice).
	
	\vspace{12pt}
	
	\item La classe \textbf{Coup} répresente un mouvement et possède une direction
	et une coordonnée d'origine.
	
	\vspace{12pt}
	
	\item La classe \textbf{Direction} possède un attribut entiers qui peut avoir
	seulement quatre valeurs possibles (haut, bas, droite et gauche). Sa concéption
	a été justifiée par la facilité d'écrire de méthodes comme \textit{toString}
	et de constantes qui répresentent les directions.

	\vspace{12pt}
	
	\item La classe \textbf{Coordonnee} répresente les valeurs d'une ligne et d'une
	colonne par rapport à la matrice qui forme le plateau.
	
	\vspace{12pt}

	\item  La classe \textbf{Fichier} implémente l'interface \textit{IMilieu} du
	paquet \textit{controle} (\textit{cf.} section \ref{sec:controle}) et
	répresente les données d'un fichier. On remarque que cette construction a été
	choisie pour garantir sa généralité, c'est-à-dire, si on veut étendre notre
	programme pour lire le plateau d'un serveur par exemple, ce dernier paquet
	reste inchangeable.
	 
\end{itemize}

\subsubsection {Les classes \og Contrôle \fg}
\label{sec:controle}

Toutes les opérations qui concernent la gestion des données et des mouvements
sont réalisées par les classes dans ce paquet, selon figure
\ref{fig:classes_controle}. On observe la présence de trois interfaces qui
garantissent sa généralité: une fois que l'interface graphique ou la façon de
lire le plateau changent, aucune modification sera nécessaire à ce paquet. Dans
notre cas, nous avons implémente deux façons d'affichage des résultats (une via
terminal et autre via des fênetres), mais toutes les deux utilisent la même
classe \textit{ControleurJeu}.

\begin{figure}[h]
    \centering
    \includegraphics[scale=0.45]{images/controle}
    \caption{Paquetage \og controle \fg ~du diagramme de classes.}
    \label{fig:classes_controle}
\end{figure}

En ce qui concerne les fonctionnalités de chaque classe individuellement, on
observe que:

\vspace{12pt}

\begin {itemize}
  	\item le classe \textbf{ControleurJeu} centralise le contrôle du jeu et,
  	conséquemment, son déroulement. C'est à elle aussi d'assigner aux contrôleurs
  	restants leurs respectives tâches, comme par exemple, envoyer au contrôleur
  	d'entrée et sortie de messages de lecture ou écriture. Compte tenu de sa
  	nature, cette classe utilise plusieurs attributs qui répresentent l'état du
  	jeu, notamment la liste de coups réalisés, un plateau et la quantité de
  	mouvements.
  	
  	\vspace{12pt}
  	
  	\item l'interface \textbf{IControleurInterface} défine les opérations qu'une
  	classe doit fournir si elle est destinée à l'affichage des données.
  	
	\vspace{12pt}

  	\item l'interface \textbf{IControleurIO} définera ce qu'une classe
  	responsable pour contrôler les opérations d'entrée et sortie devra fournir.
  	Elle fait l'usage également d'une autre interface, \textbf{IMilieu}, qui
  	répresente les caractéristiques d'un milieu quelconque.
\end{itemize}

\subsubsection{Les classes \og Interface \fg}
hhj

\newpage
\section{Annexes}

\begin{figure}[h]
    \centering 
    \includegraphics[angle=-90, scale=0.19]{images/diagramme_classes}
    \caption{Diagramme de classes.}
    \label{fig:diagramme_classes}
\end{figure}

\end{document}
