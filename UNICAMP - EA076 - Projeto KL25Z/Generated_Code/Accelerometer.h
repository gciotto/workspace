/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : Accelerometer.h
**     CDE edition : Standard
**     Project     : ea076-exp3
**     Processor   : MKL25Z128VLK4
**     Component   : MMA8451Q
**     Version     : Component 01.036, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2016-06-07, 18:04, # CodeGen: 102
**     Abstract    :
**         Implements a Driver for the MMA8451 accelerometer from Freescale.
**     Settings    :
**          Component Name                                 : Accelerometer
**          Slave Address                                  : 1D
**          I2C Bus                                        : GI2C2
**          Constant Offsets                               : Enabled
**            X offset                                     : 0
**            Y offset                                     : 0
**            Z offset                                     : 0
**          Shell                                          : Disabled
**     Contents    :
**         Enable         - uint8_t Accelerometer_Enable(void);
**         Disable        - uint8_t Accelerometer_Disable(void);
**         isEnabled      - uint8_t Accelerometer_isEnabled(bool *isEnabled);
**         SwReset        - uint8_t Accelerometer_SwReset(void);
**         ReadReg8       - uint8_t Accelerometer_ReadReg8(void* addr, void* *val);
**         WriteReg8      - uint8_t Accelerometer_WriteReg8(void* addr, void* val);
**         GetX           - int16_t Accelerometer_GetX(void);
**         GetY           - int16_t Accelerometer_GetY(void);
**         GetZ           - int16_t Accelerometer_GetZ(void);
**         GetRaw8XYZ     - uint8_t Accelerometer_GetRaw8XYZ(void* *xyz);
**         CalibrateX1g   - void Accelerometer_CalibrateX1g(void);
**         CalibrateY1g   - void Accelerometer_CalibrateY1g(void);
**         CalibrateZ1g   - void Accelerometer_CalibrateZ1g(void);
**         GetXmg         - int16_t Accelerometer_GetXmg(void);
**         GetYmg         - int16_t Accelerometer_GetYmg(void);
**         GetZmg         - int16_t Accelerometer_GetZmg(void);
**         MeasureGetRawX - uint16_t Accelerometer_MeasureGetRawX(void);
**         MeasureGetRawY - uint16_t Accelerometer_MeasureGetRawY(void);
**         MeasureGetRawZ - uint16_t Accelerometer_MeasureGetRawZ(void);
**         GetXOffset     - int16_t Accelerometer_GetXOffset(void);
**         GetYOffset     - int16_t Accelerometer_GetYOffset(void);
**         GetZOffset     - int16_t Accelerometer_GetZOffset(void);
**         GetX1gValue    - int16_t Accelerometer_GetX1gValue(void);
**         GetY1gValue    - int16_t Accelerometer_GetY1gValue(void);
**         GetZ1gValue    - int16_t Accelerometer_GetZ1gValue(void);
**         SetFastMode    - uint8_t Accelerometer_SetFastMode(bool on);
**         WhoAmI         - uint8_t Accelerometer_WhoAmI(void* *value);
**         Init           - uint8_t Accelerometer_Init(void);
**         Deinit         - uint8_t Accelerometer_Deinit(void);
**
**     License : Open Source (LGPL)
**     Copyright : (c) Copyright Erich Styger, 2013-2014, all rights reserved.
**     http://www.mcuoneclipse.com
**     This an open source software in the form of a Processor Expert Embedded Component.
**     This is a free software and is opened for education, research and commercial developments under license policy of following terms:
**     * This is a free software and there is NO WARRANTY.
**     * No restriction on use. You can use, modify and redistribute it for personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.
**     * Redistributions of source code must retain the above copyright notice.
** ###################################################################*/
/*!
** @file Accelerometer.h
** @version 01.00
** @brief
**         Implements a Driver for the MMA8451 accelerometer from Freescale.
*/         
/*!
**  @addtogroup Accelerometer_module Accelerometer module documentation
**  @{
*/         

#ifndef __Accelerometer_H
#define __Accelerometer_H

/* MODULE Accelerometer. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited components */
#include "GI2C2.h"
#include "WAIT3.h"

#include "Cpu.h"


#define Accelerometer_PARSE_COMMAND_ENABLED  0 /* set to 1 if method ParseCommand() is present, 0 otherwise */

/* 3-axis accelerometer control register addresses */
#define Accelerometer_CTRL_REG_1 0x2A
/* 3-axis accelerometer control register bit masks */
#define Accelerometer_ACTIVE_BIT_MASK 0x01
#define Accelerometer_F_READ_BIT_MASK 0x02

#define Accelerometer_CTRL_REG_2 0x2B
#define Accelerometer_CTRL_REG_2_MASK_RST (1<<4) /* software reset */

/* External 3-axis accelerometer data register addresses */
#define Accelerometer_OUT_X_MSB 0x01
#define Accelerometer_OUT_X_LSB 0x02
#define Accelerometer_OUT_Y_MSB 0x03
#define Accelerometer_OUT_Y_LSB 0x04
#define Accelerometer_OUT_Z_MSB 0x05
#define Accelerometer_OUT_Z_LSB 0x06

#define Accelerometer_WHO_AM_I  0x0D    /* Who am I register, should return 0xC4 for preproduction devices and 0xC7 for production devices */
#define Accelerometer_WHO_AM_I_VAL 0x1A /* production device value */

#define Accelerometer_XYZ_DATA_CFG 0x0E  /* XYZ Data Configuration Register */

#define Accelerometer_I2C_ADDR   (0x1D) /* I2C slave device address as set in the properties */


uint8_t Accelerometer_GetRaw8XYZ(uint8_t *xyz);
/*
** ===================================================================
**     Method      :  Accelerometer_GetRaw8XYZ (component MMA8451Q)
**     Description :
**         Returns in an array the x, y and z accelerometer as 8bit
**         values.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * xyz             - Pointer to an array of three unsigned 8bit
**                           values which are used to return the
**                           accelerometer values.
**     Returns     :
**         ---             - Error code, ERR_OK for no error.
** ===================================================================
*/

uint8_t Accelerometer_Deinit(void);
/*
** ===================================================================
**     Method      :  Accelerometer_Deinit (component MMA8451Q)
**     Description :
**         Counterpart to Init() method.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, ERR_OK if everything is ok.
** ===================================================================
*/

uint8_t Accelerometer_Init(void);
/*
** ===================================================================
**     Method      :  Accelerometer_Init (component MMA8451Q)
**     Description :
**         Initializes the device driver
**     Parameters  : None
**     Returns     :
**         ---             - Error code, ERR_OK if everything is ok.
** ===================================================================
*/

void Accelerometer_CalibrateX1g(void);
/*
** ===================================================================
**     Method      :  Accelerometer_CalibrateX1g (component MMA8451Q)
**     Description :
**         Performs a calibration of the sensor. It is assumed that the
**         Y and Z sensors have 0 g, and the X sensor has 1 g.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void Accelerometer_CalibrateY1g(void);
/*
** ===================================================================
**     Method      :  Accelerometer_CalibrateY1g (component MMA8451Q)
**     Description :
**         Performs a calibration of the sensor. It is assumed that the
**         X and Z sensors have 0 g, and the Y sensor has 1 g.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void Accelerometer_CalibrateZ1g(void);
/*
** ===================================================================
**     Method      :  Accelerometer_CalibrateZ1g (component MMA8451Q)
**     Description :
**         Performs a calibration of the sensor. It is assumed that the
**         X and Y sensors have 0 g, and the Z sensor has 1 g.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

int16_t Accelerometer_GetXmg(void);
/*
** ===================================================================
**     Method      :  Accelerometer_GetXmg (component MMA8451Q)
**     Description :
**         Returns the X value in mg
**     Parameters  : None
**     Returns     :
**         ---             - The g value in 1/1000g units
** ===================================================================
*/

int16_t Accelerometer_GetYmg(void);
/*
** ===================================================================
**     Method      :  Accelerometer_GetYmg (component MMA8451Q)
**     Description :
**         Returns the Y value in mg
**     Parameters  : None
**     Returns     :
**         ---             - The g value in 1/1000g units
** ===================================================================
*/

int16_t Accelerometer_GetZmg(void);
/*
** ===================================================================
**     Method      :  Accelerometer_GetZmg (component MMA8451Q)
**     Description :
**         Returns the Z value in mg
**     Parameters  : None
**     Returns     :
**         ---             - The g value in 1/1000g units
** ===================================================================
*/

uint16_t Accelerometer_MeasureGetRawX(void);
/*
** ===================================================================
**     Method      :  Accelerometer_MeasureGetRawX (component MMA8451Q)
**     Description :
**         Performs a measurement on X channel and returns the raw
**         value.
**     Parameters  : None
**     Returns     :
**         ---             - X sensor value
** ===================================================================
*/

uint16_t Accelerometer_MeasureGetRawY(void);
/*
** ===================================================================
**     Method      :  Accelerometer_MeasureGetRawY (component MMA8451Q)
**     Description :
**         Performs a measurement on Y channel and returns the raw
**         value.
**     Parameters  : None
**     Returns     :
**         ---             - Y sensor value
** ===================================================================
*/

uint16_t Accelerometer_MeasureGetRawZ(void);
/*
** ===================================================================
**     Method      :  Accelerometer_MeasureGetRawZ (component MMA8451Q)
**     Description :
**         Performs a measurement on Z channel and returns the raw
**         value.
**     Parameters  : None
**     Returns     :
**         ---             - Z sensor value
** ===================================================================
*/

int16_t Accelerometer_GetXOffset(void);
/*
** ===================================================================
**     Method      :  Accelerometer_GetXOffset (component MMA8451Q)
**     Description :
**         Returns the offset applied to the X value.
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

int16_t Accelerometer_GetYOffset(void);
/*
** ===================================================================
**     Method      :  Accelerometer_GetYOffset (component MMA8451Q)
**     Description :
**         Returns the offset applied to the Y value.
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

int16_t Accelerometer_GetZOffset(void);
/*
** ===================================================================
**     Method      :  Accelerometer_GetZOffset (component MMA8451Q)
**     Description :
**         Returns the offset applied to the Z value.
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

int16_t Accelerometer_GetX1gValue(void);
/*
** ===================================================================
**     Method      :  Accelerometer_GetX1gValue (component MMA8451Q)
**     Description :
**         Returns the value for 1g for channel  X.
**     Parameters  : None
**     Returns     :
**         ---             - 1g value for X
** ===================================================================
*/

int16_t Accelerometer_GetY1gValue(void);
/*
** ===================================================================
**     Method      :  Accelerometer_GetY1gValue (component MMA8451Q)
**     Description :
**         Returns the value for 1g for channel  Y.
**     Parameters  : None
**     Returns     :
**         ---             - 1g value for Y
** ===================================================================
*/

int16_t Accelerometer_GetZ1gValue(void);
/*
** ===================================================================
**     Method      :  Accelerometer_GetZ1gValue (component MMA8451Q)
**     Description :
**         Returns the value for 1g for channel  Z.
**     Parameters  : None
**     Returns     :
**         ---             - 1g value for Z
** ===================================================================
*/

int16_t Accelerometer_GetX(void);
/*
** ===================================================================
**     Method      :  Accelerometer_GetX (component MMA8451Q)
**     Description :
**         Retrieves the value for the X axis. The value is adjusted
**         with the zero calibration value (0 for 0 g, negative for
**         negative acceleration and positive for positive acceleration).
**     Parameters  : None
**     Returns     :
**         ---             - Measured X value
** ===================================================================
*/

int16_t Accelerometer_GetY(void);
/*
** ===================================================================
**     Method      :  Accelerometer_GetY (component MMA8451Q)
**     Description :
**         Retrieves the value for the Y axis. The value is adjusted
**         with the zero calibration value (0 for 0 g, negative for
**         negative acceleration and positive for positive acceleration).
**     Parameters  : None
**     Returns     :
**         ---             - Measured Y value
** ===================================================================
*/

int16_t Accelerometer_GetZ(void);
/*
** ===================================================================
**     Method      :  Accelerometer_GetZ (component MMA8451Q)
**     Description :
**         Retrieves the value for the Z axis. The value is adjusted
**         with the zero calibration value (0 for 0 g, negative for
**         negative acceleration and positive for positive acceleration).
**     Parameters  : None
**     Returns     :
**         ---             - Measured Z value
** ===================================================================
*/

uint8_t Accelerometer_SetFastMode(bool on);
/*
** ===================================================================
**     Method      :  Accelerometer_SetFastMode (component MMA8451Q)
**     Description :
**         Turns the F_READ (Fast Read Mode) on or off
**     Parameters  :
**         NAME            - DESCRIPTION
**         on              - if to turn the F_READ mode on or off
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t Accelerometer_Enable(void);
/*
** ===================================================================
**     Method      :  Accelerometer_Enable (component MMA8451Q)
**     Description :
**         Enables the device with setting the ACTIVE bit in the CTRL
**         register 1
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t Accelerometer_Disable(void);
/*
** ===================================================================
**     Method      :  Accelerometer_Disable (component MMA8451Q)
**     Description :
**         Disables the device with clearing the ACTIVE bit in the CTRL
**         register 1
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t Accelerometer_isEnabled(bool *isEnabled);
/*
** ===================================================================
**     Method      :  Accelerometer_isEnabled (component MMA8451Q)
**     Description :
**         Returns the status of the the ACTIVE bit in the CTRL
**         register 1
**     Parameters  :
**         NAME            - DESCRIPTION
**       * isEnabled       - Pointer to where to store the
**                           result, TRUE if ACTIVE bit is set, FALSE
**                           otherwise
**     Returns     :
**         ---             - error code
** ===================================================================
*/

uint8_t Accelerometer_WhoAmI(uint8_t *value);
/*
** ===================================================================
**     Method      :  Accelerometer_WhoAmI (component MMA8451Q)
**     Description :
**         Returns the value of the WHO_AM_I (0x0D) register
**     Parameters  :
**         NAME            - DESCRIPTION
**       * value           - Pointer to value to store
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t Accelerometer_ReadReg8(uint8_t addr, uint8_t *val);
/*
** ===================================================================
**     Method      :  Accelerometer_ReadReg8 (component MMA8451Q)
**     Description :
**         Reads an 8bit device register
**     Parameters  :
**         NAME            - DESCRIPTION
**       * addr            - device memory map address
**       * val             - Pointer to value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t Accelerometer_WriteReg8(uint8_t addr, uint8_t val);
/*
** ===================================================================
**     Method      :  Accelerometer_WriteReg8 (component MMA8451Q)
**     Description :
**         Write an 8bit device register
**     Parameters  :
**         NAME            - DESCRIPTION
**       * addr            - device memory map address
**       * val             - value to write
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t Accelerometer_SwReset(void);
/*
** ===================================================================
**     Method      :  Accelerometer_SwReset (component MMA8451Q)
**     Description :
**         Perform a software reset using the rst bit in the CTRL
**         register 2
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

/* END Accelerometer. */

#endif
/* ifndef __Accelerometer_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
