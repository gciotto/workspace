package gui;

import javax.swing.SpinnerListModel;
import main.Board;
import main.Client;

/**
 * Graphical representation of a LOCON board. This class inherits from JPanel, therefore
 * it can be placed inside a window, such as a JFrame. In our application, it will be instantiated
 * by the BoardsFrame class.
 * 
 * <br>
 * 
 * According to the intracont reference manual, this board presents the following features:<br>
 *  - Read Block  (5 bytes): priority + flags + analog output (2 bytes) + digital output<br>
 *  - Write Block (5 bytes): priority + flags + analog output (2 bytes) + digital output <br>
 * 
 * <br>
 * Refer to the <a href="http://git.cnpem.br/bruno.martins/prosac/blob/master/modules/LCN.h">git repository</a>
 * for further details about how PROSAC handles them.
 * 
 * @see IBoard
 * @author Gustavo CIOTTO PINTON
 * @author Bruno MARTINS
 */

public class Locon extends javax.swing.JPanel implements IBoard {

    private Board board;
    
    private String[] spinnerValues = {"5 ms", "10 ms", "50 ms", "100 ms", "250 ms", "500 ms", "1000 ms"};
    
    /**
     * Constructs a new panel. It calls initComponents function, which was generated by NetBeans
     * window editor.
     */
    public Locon() {
    	
        initComponents();
       
        /* skips are used to control canvas update speed. It determines how many 
         * point should be skipped between two points */
        setSkips((String)spinner.getValue());
    }
    
    /**
     * Registers this graphical interface with a Board object and updates its title and 
     * board address.
     * 
     * @param b Board object containing information about a detected board.
     */
    public void setBoard(Board b)
    {
        this.board = b;
        
        if(b == null)
            this.setVisible(false);
        else
        {
            txtName.setText(b.getModule().name);
            txtPosition.setText(String.valueOf(b.getPosition()));
            this.setVisible(true);
        }
        
    }

    /**
     * Sets biggest value for digital canvas. For all Locon boards, 
     * this value is 255.
     * 
     * @param max Biggest possible digital value.
     */
    public void setDigitalCanvasMax(int max){
    	this.canvas.setMaxOfChannel(max, 1);
    }
    
    /**
     * Sets smallest value for canvas. For all Locon boards, 
     * this value is 0.
     * 
     * @param min Smallest possible digital value.
     */
    public void setDigitalCanvasMin(int min) {
    	this.canvas.setMinOfChannel(min, 1);
    }
    
    /**
     * Sets biggest value for analog canvas. For 16-bit monopolar boards, 
     * this value is 2^16 - 1 = 65535
     * 
     * @param max Biggest possible analog value.
     */
    public void setAnalogCanvasMax(int max){
    	this.canvas.setMaxOfChannel(max, 0);
    }
    
    /**
     * Sets smallest value for canvas. For 16-bit bipolar boards, this value is
     * -(2^16 - 1) / 2 = -32767 (truncated, result as integer) 
     * 
     * @param min Smallest possible analog value.
     */
    public void setAnalogCanvasMin(int min) {
    	this.canvas.setMinOfChannel(min, 0);
    }
    
    /**
     * Updates the interface fields according to the values in the Board object.
     * 
     * According to the intracont reference manual:
     *  - Read Block  (5 bytes): priority + flags + analog output (2 bytes) + digital output
     *  - Write Block (5 bytes): priority + flags + analog output (2 bytes) + digital output
     */
    public void refresh()
    {
        if(board == null)
            return;
        
        int[] readBytes = board.getReadBytes();
        
        int analog = (readBytes[2] << 8) + readBytes[3];
        int digital = readBytes[4];
        
        txtReadAnalog.setText(String.valueOf(analog));
        txtReadDigital.setText(String.valueOf(digital));
        
        canvas.addMeasure(0, txtReadAnalog.getText());
        canvas.addMeasure(1, txtReadDigital.getText());
        
        int[] writeBytes = board.getWriteBytes();
        
        try {
        	analog  = Integer.parseInt(txtWriteAnalog.getText());
        }
        catch(NumberFormatException ex) {
            analog = 0;
            txtWriteAnalog.setText("0");
        }
        
        try
        {
            digital = Integer.parseInt(txtWriteDigital.getText());
        }
        catch(NumberFormatException ex)
        {
            digital = 0;
            txtWriteDigital.setText("0");
        }
            
        if (analog < 0)
            analog = 0;
        
        if(digital > 255)
            digital = 255;
        else if (digital < 0)
            digital = 0;
        
        writeBytes[2] = (analog >> 8) & 0xFF;
        writeBytes[3] = analog & 0xFF;
        writeBytes[4] = digital;
        
        int cycleCurve = cbCycle.getSelectedIndex();
        
        if(cycleCurve == 0) {
        	
            board.setWillCycle(false);
            board.setCycleCurve(0x80);
        }
        else {
        	
            board.setWillCycle(true);
            board.setCycleCurve(32 + cycleCurve - 1);
        }
        
        writeBytes[1] = board.getCycleCurve();       
        
        int rampCurve = cbRamp.getSelectedIndex();
        
        if(rampCurve == 0) {
        	
            board.setWillRamp(false);
        }
        else {
            
        	board.setWillRamp(true);
            board.setRampCurve(rampCurve - 1);     
    
            board.setRampPulses(Integer.parseInt(String.valueOf(spinnerPulses.getValue())));
        }
    }
    
    /**
     * Gets the address of this board.
     * 
     * @return Address of this board
     */
    public String getPosition() {
        return txtPosition.getText();
    }
    
    /**
     * Gets the address of this board.
     * @param p New address of this board
     */
    public void setPosition(String p) {
        txtPosition.setText(p);
    }  
    
    /**
     * Updates number of points which should be skipped during canvas painting.
     * 
     * @param time Number of skips in string format.
     * @see Canvas
     */
    private void setSkips(String time)
    {
        int value = Integer.parseInt(time.split(" ")[0]);
        int skips = value/Client.UPDATE_TIMEOUT - 1;
        
        canvas.setSkip(skips);
    }
    

    /**
     * Code generated automatically by NetBeans window editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        txtName = new javax.swing.JLabel();
        txtWriteAnalog = new javax.swing.JTextField();
        txtWriteDigital = new javax.swing.JTextField();
        lblAnalog = new javax.swing.JLabel();
        lblDigital = new javax.swing.JLabel();
        cbRamp = new javax.swing.JComboBox();
        cbCycle = new javax.swing.JComboBox();
        spinner = new javax.swing.JSpinner();
        canvas = new gui.Canvas(2);
        spinnerPulses = new javax.swing.JSpinner();
        txtReadAnalog = new javax.swing.JLabel();
        txtReadDigital = new javax.swing.JLabel();
        txtPosition = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        txtName.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        txtName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtName.setText("LCN12BMP");

        txtWriteAnalog.setText("2000");

        txtWriteDigital.setText("128");

        lblAnalog.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        lblAnalog.setText("A");

        lblDigital.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        lblDigital.setText("D");

        cbRamp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Não Rampa", "Rampa 0", "Rampa 1" ,"Rampa 2" }));

        cbCycle.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Não Cicla", 	"Cicla 0", "Cicla 1", "Cicla 2", "Cicla 3", "Cicla 4", "Cicla 5",
        																					"Cicla 6", "Cicla 7", "Cicla 8", "Cicla 9", "Cicla 10", "Cicla 11",
        																					"Cicla 12", "Cicla 13", "Cicla 14", "Cicla 15", "Cicla 16", "Cicla 17",
        																					"Cicla 18", "Cicla 19", "Cicla 20", "Cicla 21", "Cicla 22", "Cicla 23",
        																					"Cicla 24", "Cicla 25", "Cicla 26"}));
        

        spinner.setModel(new SpinnerListModel(spinnerValues));
        spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        spinnerPulses.setModel(new javax.swing.SpinnerNumberModel(1, 1, 4, 1));

        txtReadAnalog.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtReadAnalog.setText("65535");

        txtReadDigital.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtReadDigital.setText("255");

        txtPosition.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        txtPosition.setText("99");
        txtPosition.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtPosition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                    .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblDigital)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtReadDigital)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWriteDigital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblAnalog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtReadAnalog, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWriteAnalog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbCycle, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cbRamp, 0, 1, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerPulses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(spinner))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtWriteAnalog, txtWriteDigital});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtReadAnalog, txtReadDigital});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName)
                    .addComponent(txtWriteAnalog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPosition)
                    .addComponent(txtReadAnalog)
                    .addComponent(lblAnalog))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtWriteDigital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtReadDigital)
                            .addComponent(lblDigital))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbCycle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerPulses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbRamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );
    }

    private void spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerStateChanged
        setSkips((String) spinner.getValue());
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gui.Canvas canvas;
    private javax.swing.JComboBox cbCycle;
    private javax.swing.JComboBox cbRamp;
    private javax.swing.JLabel lblAnalog;
    private javax.swing.JLabel lblDigital;
    private javax.swing.JSpinner spinner;
    private javax.swing.JSpinner spinnerPulses;
    private javax.swing.JLabel txtName;
    private javax.swing.JLabel txtPosition;
    private javax.swing.JLabel txtReadAnalog;
    private javax.swing.JLabel txtReadDigital;
    private javax.swing.JTextField txtWriteAnalog;
    private javax.swing.JTextField txtWriteDigital;
    // End of variables declaration//GEN-END:variables

}
