robot_direction = pi/2;
x_robot = 3;
y_robot = 3;

labyrinth_matrix = zeros(20,20);
labyrinth_matrix (1, :) = '#';
labyrinth_matrix (20, :) = '#';
labyrinth_matrix (:, 1) = '#';
labyrinth_matrix (:, 20) = '#';
labyrinth_matrix (5:20, 5:15) = '#';

while (labyrinth_matrix (round(21 - y_robot), round(x_robot)) ~= 'F')
    
    % Search nearest pixel in d1 direction.
    
    x_d1 = x_robot + cos(robot_direction + pi/4 );
    y_d1 = y_robot + sin(robot_direction + pi/4 );
    while (x_d1 >= 1) && (x_d1 <= length(labyrinth_matrix (1,:)) ) && (21 - y_d1 >= 1) ...
            && (21 - y_d1 <= length(labyrinth_matrix)) && (labyrinth_matrix (round(x_d1), round(21 - y_d1)) ~= '#')
        
        x_d1 = x_d1 + cos(robot_direction + pi/4 + pi);
        y_d1 = y_d1 + sin(robot_direction + pi/4 + pi);
        
    end
    
    distance_d1 = sqrt((x_d1 - x_robot)^2 + (y_d1 - y_robot)^2);
    
    % Search nearest pixel in d2 direction.
    
    x_d2 = x_robot + cos(robot_direction + pi/4 );
    y_d2 = y_robot + sin(robot_direction + pi/4 );
    while (x_d2 >= 1) && (x_d2 <= length(labyrinth_matrix (1,:)) ) && (21 - y_d2 >= 1) ...
            && (21 - y_d2 <= length(labyrinth_matrix)) && (labyrinth_matrix (round(x_d2), round(21 - y_d2)) ~= '#')
        
        x_d2 = x_d2 + cos(robot_direction + pi/4 + pi);
        y_d2 = y_d2 + sin(robot_direction + pi/4 + pi);
        
    end
    
    distance_d2 = sqrt((x_d2 - x_robot)^2 + (y_d2 - y_robot)^2);
    
    % Search nearest pixel in d3 direction.
    
    x_d3 = x_robot + cos(robot_direction - pi/4 + pi);
    y_d3 = y_robot + sin(robot_direction - pi/4 + pi);
    while (x_d3 >= 1) && (x_d3 <= length(labyrinth_matrix (1,:)) ) && (y_d3 >= 1) ...
            && (y_d3 <= length(labyrinth_matrix)) && (labyrinth_matrix (round(x_d3), round(y_d3)) ~= '#')
        
        x_d3 = x_d3 + cos(robot_direction - pi/4 + pi);
        y_d3 = y_d3 + sin(robot_direction - pi/4 + pi);
        
    end
    
    distance_d3 = sqrt((x_d3 - x_robot)^2 + (y_d3 - y_robot)^2);
    
    d1_rules = get_D1_D3_Rule(distance_d1);
    d2_rules = get_D2_Rule(distance_d2);
    d3_rules = get_D1_D3_Rule(distance_d3);
    
    x_robot = x_robot + cos(robot_direction + pi);
    y_robot = y_robot + sin(robot_direction + pi);
    
end