clear all;
close a

robot_direction = pi/2;
x_robot = 3;
y_robot = 3;

labyrinth_matrix = zeros(20,20);
labyrinth_matrix (1:2, :) = '#';
labyrinth_matrix (20, :) = '#';
labyrinth_matrix (:, 1) = '#';
labyrinth_matrix (:, 19:20) = '#';
labyrinth_matrix (9:20, 5:15) = '#';
labyrinth_matrix (2:4, 2:4) = fliplr(triu(ones(3)))*'#';
labyrinth_matrix (2:5, 16:19) = flipud(flipud(triu(ones(4))))*'#';
labyrinth_matrix (18:19, 16:19) = 'F';


while (labyrinth_matrix (round(21 - y_robot), round(x_robot)) ~= 'F')
    
    labyrinth_matrix (round(21 - y_robot), round(x_robot)) = 'r';
    
    % Search nearest pixel in d1 direction.
    
    x_d1 = x_robot + cos(robot_direction + pi/4 );
    y_d1 = y_robot + sin(robot_direction + pi/4 );
    while (round(x_d1) >= 1) && (round(x_d1) <= length(labyrinth_matrix (1,:)) ) && (round(21 - y_d1) >= 1) ...
            && (round(21 - y_d1) <= length(labyrinth_matrix)) && (labyrinth_matrix (round(21 - y_d1), round(x_d1)) ~= '#')
        
        x_d1 = x_d1 + cos(robot_direction + pi/4);
        y_d1 = y_d1 + sin(robot_direction + pi/4);
        
    end
    
    distance_d1 = sqrt((x_d1 - x_robot)^2 + (y_d1 - y_robot)^2);
    
    % Search nearest pixel in d2 direction.
    
    x_d2 = x_robot + cos(robot_direction);
    y_d2 = y_robot + sin(robot_direction);
    while (round(x_d2) >= 1) && (round(x_d2) <= length(labyrinth_matrix (1,:)) ) && (round(21 - y_d2) >= 1) ...
            && (round(21 - y_d2) <= length(labyrinth_matrix)) && (labyrinth_matrix (round(21 - y_d2), round(x_d2)) ~= '#')
        
        x_d2 = x_d2 + cos(robot_direction);
        y_d2 = y_d2 + sin(robot_direction);
        
    end
    
    distance_d2 = sqrt((x_d2 - x_robot)^2 + (y_d2 - y_robot)^2);
    
    % Search nearest pixel in d3 direction.
    
    x_d3 = x_robot + cos(robot_direction - pi/4);
    y_d3 = y_robot + sin(robot_direction - pi/4);
    while (round(x_d3) >= 1) && (round(x_d3) <= length(labyrinth_matrix (1,:)) ) && (round(21 - y_d3) >= 1) ...
            && (round(21 - y_d3) <= length(labyrinth_matrix)) && (labyrinth_matrix (round(21 - y_d3), round(x_d3)) ~= '#')
        
        x_d3 = x_d3 + cos(robot_direction - pi/4);
        y_d3 = y_d3 + sin(robot_direction - pi/4);
        
    end
    
    distance_d3 = sqrt((x_d3 - x_robot)^2 + (y_d3 - y_robot)^2);
    
    d1_rules = get_D1_D3_Rule(distance_d1)
    d2_rules = get_D2_Rule(distance_d2)
    d3_rules = get_D1_D3_Rule(distance_d3)
    
    active_rules = get_Angle_Rule(d1_rules, d2_rules, d3_rules)
    
    d_angle = get_Angle (active_rules);
    
    robot_direction = robot_direction + d_angle;
    
    x_robot = x_robot + cos(robot_direction)
    y_robot = y_robot + sin(robot_direction)
    
end

figure
plot

display('Fim');